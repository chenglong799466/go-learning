
# go的数据类型的分类
Go语言将数据类型分为四类：
基础类型 ：数字、字符串和布尔型。


复合类型 ：数组和结构体。 
-- 是通过组合简单类型，来表达更加复杂的数据结构。
数组是由同构的元素组成——每个数组元素都是完全相同的类型——结构体则是由异构的元素组成的。
数组和结构体都是有```固定内存大小的数据结构```。相比之下，slice和map则是动态的数据结构，它们将根据需要动态增长

引用类型 ：指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8） 
-- 它们都是对程序中一个变量或状态的间接引用。这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。
接口类型 ：


# 字符串
标准库中有四个包对字符串处理尤为重要：bytes、strings、strconv和unicode包。

strings包提供了许多如字符串的查询、替换、比较、截断、拆分和合并等功能。

bytes包也提供了很多类似功能的函数，但是针对和字符串有着相同结构的[]byte类型。
因为字符串是只读的，因此逐步构建字符串会导致很多分配和复制。在这种情况下，使用bytes.Buffer类型将会更有效，稍后我们将展示。

strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相关的转换。

unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类。



