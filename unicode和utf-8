#ASCII
”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码

# unicode

Unicode编码则是采用双字节16位来进行编号，可编65536字符.

# utf-8

utf8是对unicode字符集进行编码的一种编码方式。

utf-8编码规则

1. UTF8编码使用1到4个字节来表示每个Unicode码点，ASCII部分字符只使用1个字节，常用字符部分使用2或3个字节表示。
2. 每个符号编码后第一个字节的高端bit位用于表示编码总共有多少个字节。如果第一个字节的高端bit为0，则表示对应7bit的ASCII字符，ASCII字符每个字符依然是一个字节，和传统的ASCII编码兼容。
   如果第一个字节的高端bit是110，则说明需要2个字节；后续的每个高端bit都以10开头。更大的Unicode码点也是采用类似的策略处理。如下
   ``
   0xxxxxxx                             runes 0-127    (ASCII)
   110xxxxx 10xxxxxx                    128-2047       (values <128 unused)
   1110xxxx 10xxxxxx 10xxxxxx           2048-65535     (values <2048 unused)
   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  65536-0x10ffff (other values unused)
   ``


# 常见的ASCII的特殊字符转义？

``
\a      响铃
\b      退格
\f      换页
\n      换行
\r      回车
\t      制表符
\v      垂直制表符
\'      单引号（只用在 '\'' 形式的rune符号面值中）
\"      双引号（只用在 "..." 形式的字符串面值中）
\\      反斜杠
``

# 可以使用16进制或者8进制输入任何字符（经过转义）。

一个十六进制的转义形式是`\xhh`，其中两个h表示十六进制数字（大写或小写都可以）。
一个八进制转义形式是`\ooo`，包含三个八进制的o数字（0到7），但是不能超过\377（译注：对应一个字节的范围，十进制为255）。

# 原生的字面量表示形式？

一个原生的字符串面值形式是`...`，使用反引号代替双引号。原生的字面量不会经过任何转义。
原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠。原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。

# 16进制换算

1. 表达方式：0-9用数字表示，10-15用字幕a-f表示。逢16进1

2. 换算： 假设有一个十六进数 2AF5, 那么如何换算成10进制呢？
从右向左，第N（N从0开始）位上，如果是是数 X （X 大于等于0，并且X小于等于 15，即：F）表示的大小为 X * 16的N次方。

用竖式计算：

2AF5换算成10进制:

第0位： 5 * 16^0 = 5

第1位： F * 16^1 = 240

第2位： A * 16^2 = 2560

第3位： 2 * 16^3 = 8192


5 * 16^0 + F * 16^1 + A * 16^2+2 * 16^3 = 10997 [1]


3. 如果不使用特殊的书写形式，16进制数也会和10进制相混。随便一个数：9876，就看不出它是16进制或10进制。
   C，C++规定，16进制数必须以 `0x开头`。比如 0x1表示一个16进制数。而1则表示一个十进制。另外如：0xff,0xFF,0X102A,等等。其中的x也不区分大小写。(注意：0x中的0是数字0，而不是字母O)


